// Generated by CoffeeScript 1.6.1
/*
 Some utility functions for coffee script
 
 IMPORTANT: These go to global namespace, compile with coffee -cb
 
 @author: mmarcusx@gmail.com
*/

var arr_add, arr_choice, arr_scalar, arr_sum, arr_takeout, championidx, random_int, random_real;

championidx = function(pop) {
  var idx, min_idx, _i, _ref;
  min_idx = 0;
  for (idx = _i = 1, _ref = pop.length; 1 <= _ref ? _i < _ref : _i > _ref; idx = 1 <= _ref ? ++_i : --_i) {
    if (pop[idx].f < pop[min_idx].f) {
      min_idx = idx;
    }
  }
  return min_idx;
};

random_real = function(lower, upper) {
  var start, _ref, _ref1;
  if (upper == null) {
    upper = 0;
  }
  start = Math.random();
  if (lower == null) {
    _ref = [0, lower], lower = _ref[0], upper = _ref[1];
  }
  if (lower > upper) {
    _ref1 = [upper, lower], lower = _ref1[0], upper = _ref1[1];
  }
  return start * (upper - lower) + lower;
};

random_int = function(lower, upper) {
  var start, _ref, _ref1;
  if (upper == null) {
    upper = 0;
  }
  start = Math.random();
  if (lower == null) {
    _ref = [0, lower], lower = _ref[0], upper = _ref[1];
  }
  if (lower > upper) {
    _ref1 = [upper, lower], lower = _ref1[0], upper = _ref1[1];
  }
  return Math.floor(start * (upper - lower + 1) + lower);
};

arr_choice = function(arr, c) {
  var i, idx, n, _i, _j, _ref, _ref1, _results;
  n = (function() {
    _results = [];
    for (var _i = 0, _ref = arr.length; 0 <= _ref ? _i < _ref : _i > _ref; 0 <= _ref ? _i++ : _i--){ _results.push(_i); }
    return _results;
  }).apply(this);
  for (i = _j = 0; 0 <= c ? _j < c : _j > c; i = 0 <= c ? ++_j : --_j) {
    idx = this.random_int(i, arr.length - 1);
    _ref1 = [n[idx], n[i]], n[i] = _ref1[0], n[idx] = _ref1[1];
  }
  return n.slice(0, c);
};

arr_takeout = function(arr, idx) {
  return arr.slice(0, idx).concat(arr.slice(idx + 1));
};

arr_add = function(arr1, arr2) {
  var arr3, i, _i, _ref;
  arr3 = [];
  for (i = _i = 0, _ref = arr1.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
    arr3.push(arr1[i] + arr2[i]);
  }
  return arr3;
};

arr_scalar = function(arr, scalar) {
  var i, x, _i, _len;
  for (i = _i = 0, _len = arr.length; _i < _len; i = ++_i) {
    x = arr[i];
    arr[i] = x * scalar;
  }
  return arr;
};

arr_sum = function(arr) {
  var s, x, _i, _len;
  s = 0.0;
  for (_i = 0, _len = arr.length; _i < _len; _i++) {
    x = arr[_i];
    s += x;
  }
  return s;
};
