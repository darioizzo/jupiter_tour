// Generated by CoffeeScript 1.6.1

/*
 MGA-1DSM part: jumping from one moon to another
 
 @author: mmarcusx@gmail.com
*/


/*
    classes
*/


(function() {
  var mga_part;

  mga_part = (function() {

    function mga_part(seq, tof, t0, v_inf) {
      var i, invalid_tof, t, x, _i, _ref;
      if (seq.length < 2) {
        throw 'ValueError: sequence needs at least two bodies';
      }
      if (tof.length !== (seq.length - 1)) {
        throw 'ValueError: tof sequence has the wrong length';
      }
      invalid_tof = (function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = tof.length; _i < _len; _i++) {
          t = tof[_i];
          if (t.length !== 2) {
            _results.push(t);
          }
        }
        return _results;
      })();
      if (invalid_tof.length !== 0) {
        throw 'ValueError: tof sequence must consist of 2-tuples';
      }
      this.seq = seq;
      this.tof = tof;
      this.t0 = t0;
      this.vi_inf = v_inf;
      this.dim = 4 * (seq.length - 1);
      this.bounds = (function() {
        var _i, _ref, _results;
        _results = [];
        for (x = _i = 1, _ref = this.dim; 1 <= _ref ? _i <= _ref : _i >= _ref; x = 1 <= _ref ? ++_i : --_i) {
          _results.push([0, 0]);
        }
        return _results;
      }).call(this);
      for (i = _i = 0, _ref = this.bounds.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
        console.log(i);
        if (i % 4 === 0) {
          this.bounds[i] = [-2 * Math.PI, 2 * Math.PI];
        } else if (i % 4 === 1) {
          this.bounds[i] = [1.1, 30];
        } else if (i % 4 === 2) {
          this.bounds[i] = [1e-5, 1.0 - 1e-5];
        } else if (i % 4 === 3) {
          console.log(tof[0]);
          this.bounds[i] = tof[Math.floor(i / 4)];
        }
      }
      console.log(this.bounds);
    }

    mga_part.prototype.objfun = function(x) {
      var T, i, planet, t_P, _i, _len, _ref;
      T = (function() {
        var _i, _ref, _results;
        _results = [];
        for (i = _i = 0, _ref = this.dim; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
          if ((i + 1) % 4 === 0) {
            _results.push(x[i]);
          }
        }
        return _results;
      }).call(this);
      t_P = [];
      _ref = this.seq;
      for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
        planet = _ref[i];
        t_P[i] = csutils.arr_sum(T.slice(0, i));
      }
      console.log(T);
      console.log(t_P);
      return retval;
    };

    mga_part.prototype.feasible = function(x) {
      var elem, i, _i, _len;
      for (i = _i = 0, _len = x.length; _i < _len; i = ++_i) {
        elem = x[i];
        if (!((this.bounds[i][0] <= elem && elem <= this.bounds[i][1]))) {
          return false;
        }
      }
      return true;
    };

    return mga_part;

  })();

  /*
      main namespace
  */


  jdebox.gen_mga_part = function() {
    var prob;
    console.log('generate mga_part');
    try {
      prob = new jupiter.mga_part([europa, io, europa], [[4, 50], [5, 60]], 23, 24);
    } catch (error) {
      alert(error);
    }
    document.getElementById('popbutton').disabled = false;
    return prob;
  };

}).call(this);
